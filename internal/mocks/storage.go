// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/domain/storage.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/manabie-com/togo/internal/domain"
)

// MockTaskStore is a mock of TaskStore interface.
type MockTaskStore struct {
	ctrl     *gomock.Controller
	recorder *MockTaskStoreMockRecorder
}

// MockTaskStoreMockRecorder is the mock recorder for MockTaskStore.
type MockTaskStoreMockRecorder struct {
	mock *MockTaskStore
}

// NewMockTaskStore creates a new mock instance.
func NewMockTaskStore(ctrl *gomock.Controller) *MockTaskStore {
	mock := &MockTaskStore{ctrl: ctrl}
	mock.recorder = &MockTaskStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskStore) EXPECT() *MockTaskStoreMockRecorder {
	return m.recorder
}

// AddTaskWithLimitPerDay mocks base method.
func (m *MockTaskStore) AddTaskWithLimitPerDay(task domain.Task, limit int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTaskWithLimitPerDay", task, limit)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTaskWithLimitPerDay indicates an expected call of AddTaskWithLimitPerDay.
func (mr *MockTaskStoreMockRecorder) AddTaskWithLimitPerDay(task, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTaskWithLimitPerDay", reflect.TypeOf((*MockTaskStore)(nil).AddTaskWithLimitPerDay), task, limit)
}

// GetTasksByUserIDAndDate mocks base method.
func (m *MockTaskStore) GetTasksByUserIDAndDate(userID, date string) ([]domain.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTasksByUserIDAndDate", userID, date)
	ret0, _ := ret[0].([]domain.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTasksByUserIDAndDate indicates an expected call of GetTasksByUserIDAndDate.
func (mr *MockTaskStoreMockRecorder) GetTasksByUserIDAndDate(userID, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTasksByUserIDAndDate", reflect.TypeOf((*MockTaskStore)(nil).GetTasksByUserIDAndDate), userID, date)
}

// MockUserStore is a mock of UserStore interface.
type MockUserStore struct {
	ctrl     *gomock.Controller
	recorder *MockUserStoreMockRecorder
}

// MockUserStoreMockRecorder is the mock recorder for MockUserStore.
type MockUserStoreMockRecorder struct {
	mock *MockUserStore
}

// NewMockUserStore creates a new mock instance.
func NewMockUserStore(ctrl *gomock.Controller) *MockUserStore {
	mock := &MockUserStore{ctrl: ctrl}
	mock.recorder = &MockUserStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserStore) EXPECT() *MockUserStoreMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserStore) CreateUser(arg0 domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserStoreMockRecorder) CreateUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserStore)(nil).CreateUser), arg0)
}

// FindUserByID mocks base method.
func (m *MockUserStore) FindUserByID(arg0 string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByID", arg0)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByID indicates an expected call of FindUserByID.
func (mr *MockUserStoreMockRecorder) FindUserByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByID", reflect.TypeOf((*MockUserStore)(nil).FindUserByID), arg0)
}

// GetUserTasksPerDay mocks base method.
func (m *MockUserStore) GetUserTasksPerDay(userID string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserTasksPerDay", userID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserTasksPerDay indicates an expected call of GetUserTasksPerDay.
func (mr *MockUserStoreMockRecorder) GetUserTasksPerDay(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserTasksPerDay", reflect.TypeOf((*MockUserStore)(nil).GetUserTasksPerDay), userID)
}
